################################################################################
# Encabezado del Archivo .gitignore para ReinventProse 2.0                     #
# ---------------------------------------------------------------------------- #
# Propósito:                                                                   #
# Este archivo especifica los archivos y directorios que Git debe ignorar      #
# en el proyecto ReinventProse 2.0. El objetivo es asegurar que solo los       #
# archivos fuente de Python (.py) y los assets de imagen relevantes para la    #
# aplicación sean versionados. Se excluyen archivos generados por el sistema,  #
# entornos virtuales, cachés, bases de datos locales, archivos de              #
# configuración de IDE específicos del usuario, y otros artefactos de          #
# desarrollo que no forman parte del código fuente distribuible.               #
#                                                                              #
# Autor: PJ (Programador Jefe)                                                 #
# Fecha: 07/06/2025                                                            #
# Versión: v0.0.1                                                              #
# Basado en: Requerimientos del Jefe para limpieza de .gitignore.              #
################################################################################

# 1. Ignorar todo por defecto
# Esta es una estrategia común: ignorar todo primero y luego explícitamente
# permitir (des-ignorar) lo que sí se quiere versionar.
*

# 2. No ignorar (permitir) los archivos fuente de Python
!*.py

# 3. No ignorar (permitir) los archivos de imagen comunes
# Añade o quita extensiones según los assets reales del proyecto.
!*.png
!*.jpg
!*.jpeg
!*.gif
!*.bmp
!*.ico
!*.svg

# 4. No ignorar (permitir) el propio archivo .gitignore y README
# Es buena práctica versionar el .gitignore y un README.
!.gitignore
!README.md
!readme.md

# 5. No ignorar (permitir) directorios que puedan contener archivos permitidos
# Si los archivos .py o imágenes están dentro de subdirectorios, esos directorios
# deben ser explícitamente no ignorados para que Git pueda rastrear su contenido.
# Esto se logra permitiendo los directorios y luego los archivos dentro.
# Ejemplo: Si tienes "assets/images/logo.png", necesitarías:
# !assets/
# !assets/images/
# (El !*.png ya cubriría el logo.png)
#
# Para la estructura actual de ReinventProse 2.0, no parece haber subdirectorios
# complejos con código o assets críticos que necesiten esta regla de forma generalizada
# más allá de permitir que los archivos .py e imágenes se encuentren en cualquier
# parte del árbol de directorios que no esté explícitamente ignorado abajo.
# La combinación de "*" seguido de "!*.py" y "!*.jpg" etc., permite que
# archivos con esas extensiones sean rastreados en cualquier directorio no ignorado.

# 6. Ignorar directorios y archivos específicos de Python
__pycache__/
*.pyc
*.pyo
*.pyd
*.egg-info/
dist/
build/
*.egg
*.whl

# 7. Entornos virtuales de Python
# Comunes para venv, virtualenv
.venv/
venv/
ENV/
env/
env.bak/
venv.bak/

# 8. Archivos de base de datos SQLite
# Dado que la BD se genera y es específica del entorno de ejecución.
*.db
*.sqlite
*.sqlite3
reinventprose_v2_data.db # Nombre específico de la BD de la aplicación

# 9. Archivos de configuración y estado específicos del usuario/IDE
# Visual Studio Code
.vscode/

# PyCharm
.idea/

# Archivos de configuración local de la aplicación
# (como el directorio .reinventprose_v2_config para la perspectiva AUI)
.reinventprose_v2_config/
main_window_perspective.txt # Archivo específico de perspectiva

# Archivos temporales comunes y de sistema operativo
*.bak
*.swp
*~
Thumbs.db
.DS_Store

# Logs de aplicación (si se generan)
*.log
logs/
Logs/

# Dependencias instaladas localmente (si se usara un gestor como pipenv/poetry
# que crea archivos Pipfile.lock, poetry.lock, o un directorio de paquetes local
# que no sea el estándar del sistema/entorno virtual).
# Pipfile
# Pipfile.lock
# poetry.lock
# .pdm.toml
# pdm.lock

# Archivos de cobertura de pruebas
.coverage
coverage.xml
htmlcov/

# Documentación generada (si se usa Sphinx u otro generador localmente)
# _build/
# docs/_build/

# Archivos específicos de empaquetadores como PyInstaller
*.spec
# El directorio dist/ y build/ ya están cubiertos arriba.

# Comentario final:
# Este .gitignore es más restrictivo que el original de VisualStudio.
# Se enfoca en un proyecto Python de escritorio.
# Revisar y ajustar la sección 3 (formatos de imagen) y la necesidad
# de des-ignorar directorios específicos si la estructura del proyecto cambia.